:B~ Sobre aquest manual

1~about-manual Sobre aquest manual

Aquest manual serveix com a punt d'accés únic a tota la documentació
relacionada amb el ${project} i en particular s'aplica al programari produït
pel projecte per a la versió Debian 9.0 "${stable}". Una versió actualitzada
es pot trobar sempre a http://live-systems.org/

Si bé live-manual es centra principalment en ajudar a construir un sistema
viu i no en temes dels usuaris finals, un usuari final pot trobar informació
útil en aquestes seccions: {Conceptes bàsics}#the-basics abasta la
descàrrega d'imatges prefabricades i la preparació de les imatges per a ser
arrencades des dels dispositius o la xarxa, ja sigui utilitzant el servei de
construcció d'imatges web o executant live-build directament en el
sistema. {Personalització dels comportaments en temps
d'execució}#customizing-run-time-behaviours descriu algunes de les opcions
que es poden especificar durant l'arrencada del sistema, com ara la selecció
de la disposició del teclat, la configuració regional i l'ús de la
persistència.

Algunes de les ordres esmentades en el text s'han d'executar amb privilegis
de superusuari que es poden obtenir esdevenint l'usuari root amb #{su}# o
mitjançant l'ús de #{sudo}#. Per a distingir entre les ordres que poden ser
executades per un usuari sense privilegis i aquelles que requereixen
privilegis de superusuari, s'anteposa #{$}# o #{#}# respectivament. Aquest
símbol no és part de l'ordre. 

2~ Per als impacients

Si bé creiem que tot el que hi ha en aquest manual és important, si més no,
per a alguns dels nostres usuaris, ens adonem que hi ha una gran quantitat
de material per a cobrir i que és possible que es vulgui experimentar l'èxit
amb el programari aviat, abans d'aprofundir en els detalls. Per tant, us
recomanem llegir en el següent ordre.

En primer lloc, llegir aquest capítol, {Sobre aquest manual}#about-manual,
des del principi i acabant amb els {Termes}#terms. A continuació, saltar als
tres tutorials abans dels {Exemples}#examples, secció pensada per a ensenyar
com fer la construcció d'una imatge i alguns aspectes bàsics de la
personalització. Llegir en primer lloc {Ús dels exemples}#using-the-examples
seguit pel {Tutorial 1: Una imatge per defecte}#tutorial-1, {Tutorial 2: Una
utilitat de navegador web}#tutorial-2 i finalment, {Tutorial 3: Una image
personalitzada}#tutorial-3. Al final d'aquests tutorials, es tindrà una idea
del que es pot fer amb els sistemes en viu.

Us animem a tornar i a fer un estudi del manual en profunditat, la propera
lectura pot ser {Conceptes bàsics}#the-basics, fregant o saltant {Construir
una imatge netboot}#building-netboot-image, i acabant amb la lectura de la
{Visió general de la personalització}#customization-overview i els capítols
que segueixen. En aquest punt, esperem que estigueu ben emocionats pel que
es pot fer amb els sistemes en viu i motivats per llegir la resta del
manual, de principi a fi.

2~terms Termes

_* *{Sistema viu}*: Un sistema operatiu que pot arrencar sense necessitat
d'instal·lació en un disc dur. Els sistemes vius no alteren el sistema
operatiu local(s) o els fitxer(s) ja instal·lats al disc dur de l'ordinador
a menys que així se'ls ho indiqui. Els sistemes vius normalment s'inician
des de dispositius, com ara CDs, DVDs o memòries USB. Alguns també poden
arrencar des de la xarxa (amb les imatges netboot, veure {Construir una
imatge netboot}#building-netboot-image), o mitjançant internet (amb el
parametre #{fetch=URL}#, veure {Webbooting}#webbooting).

_* *{Medi en viu}*: A diferència de sistema en viu, el medi en viu es
refereix al CD, DVD o memòria USB on es copia el fitxer binari produït per
live-build i utilitzat per a arrencar el sistema en viu. Més àmpliament, el
terme també es refereix a qualsevol lloc on resideix el fitxer binari als
efectes d'iniciar el sistema en viu, com ara la ubicació dels fitxers per a
arrencar en xarxa.

_* *{${project}}*: El projecte que manté, entre altres, els paquets
live-boot, live-build, live-config, live-tools i live-manual. 

_* *{Sistema amfitrió}*: L'entorn utilitzat per a crear el sistema en viu.

_* *{Sistema objectiu}*: L'entorn que s'utilitza per a executar el sistema
en viu.

_* *{live-boot}*: Una col·lecció de scripts per a arrencar els sistemes
vius.

_* *{live-build}*: Una col·lecció d'scripts utilitzats per a construir
sistemes en viu personalitzats.

_* *{live-config}*: Una col·lecció de scripts utilitzats per a configurar un
sistema en viu durant el procés d'arrencada.

_* *{live-tools}*: Una col·lecció d'scripts addicionals que s'utilitzen per
a realitzar tasques útils en un sistema viu en execució.

_* *{live-manual}*: Aquest document és mantingut en un paquet anomenat
live-manual

_* *{Instal·lador de Debian (d-i)}*: El sistema oficial d'instal·lació de la
distribució Debian.

_* *{Paràmeters d'arrencada}*: Els paràmetres que es poden introduir a
l'indicador del carregador d'arrencada per a influir en el nucli o
live-config

_* *{chroot}*: El programa /{chroot}/, #{chroot(8)}#, ens permet executar
diferentes instàncies d'un entorn GNU/Linux a la vegada en un sol sistema
sense reiniciar.

_* *{Imatge binaria}*: Un fitxer que conté el sistema en viu, com ara
live-image-i386.hybrid.iso o live-image-i386.img.

_* *{Distribució objectiu}*: La distribució en què es basa el sistema en
viu. Que pot diferir de la distribució del sistema amfitrió.

_* *{stable/testing/unstable}*: La distribució *{stable}*, actualment
anomenada ${stable}, conté l'última distribució de Debian llençada
oficialment. La distribució *{testing}*, temporalment anomenada ${testing},
és l'àrea d'assaig per a la pròxima versió *{stable}*. Un avantatge
important de l'ús d'aquesta distribució és que té versions més recents del
programari en relació amb l'edició *{stable}*. La distribució *{unstable}*,
permanentment anomenada sid, és on es produeix el desenvolupament actiu de
Debian. En general, aquesta distribució és utilitzada pels desenvolupadors i
els que els agrada viure en risc. Al llarg del manual, es tendeix a
utilitzar els seus noms en clau, com ara ${testing} o sid, ja que és el que
fan servir les pròpies eines.

2~ Autors

Llistat d'autors (en ordre alfabètic)

_* Ben Armstrong

_* Brendan Sleight

_* Carlos Zuferri

_* Chris Lamb

_* Daniel Baumann

_* Franklin Piat

_* Jonas Stein

_* Kai Hendry

_* Marco Amadori

_* Mathieu Geli

_* Matthias Kirschner

_* Richard Nelson

_* Trent W. Buck

2~how-to-contribute Contribuir a aquest document

Aquest manual està pensat com un projecte comunitari i totes les propostes
per a millorar-lo i les contribucions són molt benvingudes. Veure la secció
{Contribuir al projecte}#contributing-to-project per a obtenir informació
detallada sobre com obtenir la clau i fer bons commits.

3~applying-changes Aplicar canvis

Per tal de realitzar canvis en el manual anglès s'ha d'editar els fitxers
adequats a #{manual/en/}# però abans de presentar una contribució, s'ha de
previsualitzar el treball. Per a previsualitzar el live-manual, assegurar-se
que s'han instal·lat els paquets necessaris per a la seva construcció
mitjançant l'execució de:

code{

 # apt-get install make po4a ruby ruby-nokogiri sisu-complete

}code

Es pot crear el live-manual des del directori de nivell superior del arbre
Git mitjançant l'execució de:

code{

 $ make build

}code

Tenint en compte que es necessita un cert temps per construir el manual en
tots els idiomes suportats, els autors poden utilitzar un dels mètodes
abreujats per fer revisions ràpides de la nova documentació que han afegit
al manual en anglès. Amb #{PROOF=1}# es construeix live-manual en format
html, però sense els fitxers html segmentats, i amb #{PROOF=2}# es
construeix live-manual en format pdf, però només el retrat A4 i carta. És
per això que amb l'ús de qualsevol de les possibilitats #{PROOF=}# es pot
estalviar una quantitat considerable de temps, per exemple:

code{

 $ make build PROOF=1

}code

Quan es revisa una de les traduccions, és possible construir un sol idioma
mitjançant l'execució de, per exemple:

code{

 $ make build LANGUAGES=de

}code

També es possible crear per tipus de document, per exemple: 

code{

 $ make build FORMATS=pdf

}code

O combinar tot dos, per exemple:

code{

 $ make build LANGUAGES=de FORMATS=html

}code

Després de revisar el treball i assegurar-se que tot està bé, no fer un
#{make commit}# a menys que s'actualitzin les traduccions al mateix temps, i
en aquest cas, no barrejar els canvis al manual anglès i les traduccions en
el mateix commit, fer-ne un altre separat per a cada canvi. Veure la secció
{Traducció}#translation per a més detalls.

3~translation Traducció

Per a traduir live-manual, seguir aquests passos, depenent de si s'està
començant una traducció des de zero o si es segueix treballant en una ja
existent:

_* Començar una nova traducció des de zero

_2* Traduir els fitxers *{about_manual.ssi.pot}*, *{about_project.ssi.pot}*
i *{index.html.in.pot}* de #{manual/pot/}# a la vostra llengua amb el vostre
editor favorit (per exemple /{poedit}/). Enviar els fitxers #{.po}# traduïts
a la llista de correu per comprovar la seva integritat. La comprovació
d'integritat de live-manual garanteix que els fitxers #{.po}# són traduïts
al 100% però també detecta possibles errors.

_2* Un cop comprovats, per a activar una nova llengua al autobuild, només
cal afegir els fitxers inicials traduïts a #{manual/po/${LANGUAGE}/}# i
executar #{make commit}#. I llavors editar #{manual/_sisu/home/index.html}#
afegint el nom de la llengua i el seu nom en anglès entre parèntesis.

_* Continuar amb una traducció ja començada

_2* Una vegada que s'ha afegit la nova llengua, es pot continuar traduint la
resta de fitxers .po dins de #{manual/po/${LANGUAGE}/}# a l'atzar amb
l'editor favorit (com per exemple /{poedit}/).

_2* No oblidar que es necessari fer un #{make commit}# per a garantir que
els manuals traduïts s'actualitzin a partir dels fitxers .po i llavors es
poden revisar els canvis executant #{make build}# abans de #{git add .}#,
#{git commit -m "Translating..."}# i #{git push}#. Recordar que #{make
build}# pot trigar una quantitat considerable de temps, però es poden
revisar els idiomes de forma individual com s'explica a la secció {Aplicar
canvis}#applying-changes

Després d'executar #{make commit}# es podrà veure bastant text a la
pantalla. Bàsicament són missatges informatius sobre l'estat del procés i
també algunes pistes sobre el que es pot fer per a millorar live-manual. Si
no es veu cap error fatal, generalment es pot procedir i enviar la
contribució.

live-manual ve amb dues utilitats que poden ser de gran ajuda pels
traductors a l'hora de trobar missatges sense traduir i difusos. La primera
és "make translate". Aquesta activa un script que diu en detall quants
missatges sense traduir hi ha a cada fitxer .po. La segona, "make fixfuzzy",
només actua sobre els missatges difusos però ajuda a trobar-los i
corregir-los un per un.

Tenir en compte que tot i que aquestes utilitats poden ser molt útils per a
fer traduccions en la línia d'ordres, l'ús d'una eina especialitzada com
/{poedit}/ és la manera recomanada de fer la tasca. També és una bona idea
llegir la documentació de localització de debian (l10n) i, específicament
dins live-manual, les {Directrius per a traductors}#guidelines-translators.

*{Nota:}* Es pot utilitzar #{make clean}# per a netejar l'arbre git abans de fer un push. Aquest  pas no és obligatori, gràcies al fitxer .gitignore, però és una bona pràctica per a evitar enviar fitxers de forma involuntària.
