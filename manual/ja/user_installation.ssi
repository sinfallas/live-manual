:B~ インストール

1~installation インストール

2~requirements 要件

Live システムイメージのビルドにはわずかながらシステム要件があります:

_* スーパーユーザ (root) 権限

_* 最新版の live-build

_* /{bash}/ や /{dash}/ 等の POSIX に準拠したシェル

_* /{debootstrap}/

_* Linux 2.6 以降。

Debian や Debian 派生ディストリビューションの利用は必須ではないことに注意してください - live-build
は上記の要件を満たすほぼありとあらゆるディストリビューションで動作します。

2~installing-live-build live-build のインストール

live-build のインストールにはいくつか方法があります:

_* Debian リポジトリから

_* ソースから

_* スナップショットから

Debian を使っている場合に推奨するのは Debian リポジトリからの live-build のインストールです。

3~ Debian リポジトリから

他のあらゆるパッケージと同様に、単に live-build をインストールします:

code{

 # apt-get install live-build

}code

3~ ソースから

live-build はGitバージョン管理システムを使って開発されています。Debian ベースのシステムでは /{git}/
パッケージで提供されています。最新のコードを取得するには

code{

 $ git clone git://live-systems.org/git/live-build.git

}code

を実行します。Debian パッケージを自分でビルド、インストールすることもできます。

code{

 $ cd live-build
 $ dpkg-buildpackage -b -uc -us
 $ cd ..

}code

を実行し、新しくできた #{.deb}# ファイルから対象のものをインストールします。例えば

code{

 # dpkg -i live-build_4.0-1_all.deb

}code

システムに live-build を直接インストールすることもできます:

code{

 # make install

}code

アンインストールは:

code{

 # make uninstall

}code

3~ 「スナップショット」から

live-build をソースからビルドあるいはインストールしたくない場合、スナップショットを利用できます。スナップショットは Git
の最新版から自動的にビルドされ、http://live-systems.org/debian/ から利用できるようになっています。

2~ live-boot と live-config のインストール

*{注意:}* 独自の Live システムを作成するためにシステムに live-boot や live-config をインストールする必要はありません。インストールは無害で、参照目的で有用でもあります。文書だけを望む場合には /{live-boot-doc}/ や /{live-config-doc}/ パッケージを別々にインストールできるようになっています。

3~ Debian リポジトリから

live-boot と live-config はどちらも、{live-build のインストール}#installing-live-build
にあるように Debian リポジトリから利用できるようになっています。

3~ ソースから

gitから最新のソースを利用するには以下の処理を追ってください。{用語}#terms で触れている用語について必ずよく理解しておくようにしてください。

_* live-boot 及び live-config のソースの取得

code{

 $ git clone git://live-systems.org/git/live-boot.git
 $ git clone git://live-systems.org/git/live-config.git

}code

パッケージをソースからビルドする理由が独自化である場合は、独自化の詳細について live-boot や live-config の man
ページを参考にしてください。

_* live-boot 及び live-config の .deb ファイルのビルド

ビルドは対象ディストリビューションまたは対象のプラットフォームを収録している chroot で行う必要があります: これはつまり、対象が
${testing} であれば ${testing} に対してビルドすべきだということです。

ビルドシステムとは異なるディストリビューションを対象とする live-boot をビルドする必要がある場合は /{pbuilder}/ や
/{sbuild}/ といった個人向けビルダーを使ってください。例えば ${testing} の Live イメージであれば live-boot を
${testing} の chroot
でビルドしてください。対象のディストリビューションがビルドシステムのディストリビューションと一致している場合はビルドシステムで直接
(/{dpkg-dev}/ パッケージにより提供される) #{dpkg-buildpackage}# を使ってビルドできます:

code{

 $ cd live-boot
 $ dpkg-buildpackage -b -uc -us
 $ cd ../live-config
 $ dpkg-buildpackage -b -uc -us

}code

_* 件の .deb ファイルの利用

live-boot と live-config は live-build
システムによりインストールされるため、ホストシステムでパッケージをインストールするだけでは十分ではありません: 生成された .deb
ファイルを他の独自パッケージと同じように扱う必要があります。ソースからビルドする目的は恐らく公式リリース前の短期間に新しいものをテストすることなので、{変更したあるいはサードパーティ製パッケージのインストール}#installing-modified-or-third-party-packages
に従って、関連するファイルを設定に一時的に収録するようにしてください。特に、どちらのパッケージも一般的な部分、文書、そしてバックエンドに分割されていることに注意してください。一般的な部分と設定に合うバックエンドをただ1つ、オプションで文書を収録してください。Live
イメージを現在のディレクトリでビルドし、前述のディレクトリに両方のパッケージの単一バージョンの .deb ファイルを全て生成したものと仮定して、以下の
bash コマンドでデフォルトのバックエンドを含めて関連するパッケージを全てコピーします:

code{

 $ cp ../live-boot{_,-initramfs-tools,-doc}*.deb  config/packages.chroot/
 $ cp ../live-config{_,-sysvinit,-doc}*.deb  config/packages.chroot/

}code

3~ 「スナップショット」から

live-build の設定ディレクトリで live-systems.org
のパッケージリポジトリをサードパーティリポジトリとして設定することで、live-build が自動的に live-boot と live-config
の最新のスナップショットを利用するようにできます。
